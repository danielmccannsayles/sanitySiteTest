{"version":3,"sources":["client.js","components/PageFour.js","components/Project.js","App.js","components/PageOne.js","components/PageTwo.js","components/PageThree.js","reportWebVitals.js","index.js"],"names":["sanityClient","projectId","dataset","apiVersion","useCdn","builder","imageUrlBuilder","Project","props","source","useState","pageData","setPageData","useEffect","fetch","project","then","data","console","log","title","href","url","ImageUrl","src","image","width","blocks","content","urlFor","PageComponent","pages","pageOne","pageTwo","map","el","index","pageThree","pageFour","projectOne","projectTwo","App","contact","setContact","linksNav","setLinksNav","summary","setSummary","siteMap","setSiteMap","currentPage","setCurrentPage","setProject","changePage","page","JSON","stringify","url1","Link1","url2","Link2","style","marginTop","marginBottom","onClick","redirect1","page1","redirect2","page2","redirect3","page3","redirect4","page4","redirect5","page5","redirect6","page6","phoneNumber","emailAddress","address","logoImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fa0df98.chunk.js","sourcesContent":["import sanityClient from \"@sanity/client\";\n\nexport default sanityClient({\n  projectId: \"lb85ts9m\", // find this at manage.sanity.io or in your sanity.json\n  dataset: \"production\", // this is from those question during 'sanity init'\n  apiVersion: '2021-08-31', // use a UTC date string\n  useCdn: true,\n});","import React, { useEffect, useState } from \"react\";\nimport sanityClient from \"../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function PageFour() {\n  const [pageData, setPageData] = useState(null);\n\n  useEffect(() => {\n    //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"article\" ]{\n          title,\n         url,\n         \"ImageUrl\": headerImage.asset->url,\n         content\n        }`\n      )\n      .then((data) => {\n        setPageData(data);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <>\n      <div>News</div>\n      <div>\n        {pageData &&\n          pageData.map(\n            (\n              el,\n              index\n            ) => (\n              <div>\n                <a href={el.url} key={index+100}> {/*Change key to something more unique - index is last resort*/}\n                  {\" \"}\n                  {el.title}\n                </a>\n                <BlockContent\n                  blocks={el.content}\n                  projectId={sanityClient.projectId}\n                  dataset={sanityClient.dataset}\n                ></BlockContent>\n\n                {el.ImageUrl && <img src={urlFor(el.ImageUrl).width(200).url()} /> }\n              </div> \n            )\n          )}\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport sanityClient from \"../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function Project(props) {\n  const [pageData, setPageData] = useState(null);\n\n  useEffect(() => {\n    //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"${props.project}\" ]{\n            title,\n           url,\n           \"ImageUrl\": mainImage.asset->url,\n           content\n          }`\n      )\n      .then((data) => {\n        setPageData(data);\n        console.log(data);\n      });\n  }, [props.project]);\n\n  return (\n    <>\n      {\" \"}\n      {pageData && (\n        <>\n          <div>{pageData[0].title}</div> {/*Currently set to [1] cause I accidentally made two of these pages - delete thes in the future*/}\n          <a href={pageData[0].url}>Link to Project</a>\n\n          {pageData[0].ImageUrl && <img src={urlFor(pageData[0].ImageUrl).width(200).url()} /> }\n\n\n          <BlockContent\n            blocks={pageData[0].content}\n            projectId={sanityClient.projectId}\n            dataset={sanityClient.dataset}\n          />\n        </>\n      )}\n    </>\n  );\n}\n","\nimport React, { useEffect, useState } from \"react\";\nimport sanityClient from \"./client.js\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nimport PageOne from \"./components/PageOne.js\";\nimport PageTwo from \"./components/PageTwo.js\";\nimport PageThree from \"./components/PageThree.js\";\nimport PageFour from \"./components/PageFour.js\";\nimport Project from \"./components/Project.js\";\n\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nconst pages = {\n  pageOne: PageOne,\n  pageTwo: PageTwo,\n  pageThree: PageThree,\n  pageFour: PageFour,\n  projectOne: Project,\n  projectTwo: Project,\n}\n\nvar PageComponent;\n\n\nfunction App() {\n\n  const [contact, setContact] = useState(null);\n  const [linksNav, setLinksNav] = useState(null);\n  const [summary, setSummary] = useState(null);\n  const [siteMap, setSiteMap] = useState(null);\n  const [currentPage, setCurrentPage] = useState('pageOne'); //value from 1 to 5 indicating pages 1-4 & project\n  const [project, setProject] = useState('projectTwo'); //used for project - two values\n\n  PageComponent = pages[currentPage];\n\n  const siteMapComponents=[];\n\n  useEffect(() => { //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"linksNav\" ]{\n          \"ImageUrl\": mainImg.asset->url,\n          Link1,\n          Link2,\n          url1,\n          url2\n        }`\n      )\n      .then((data) => {\n        setLinksNav(data);\n        console.log(data);\n        });\n\n      sanityClient\n      .fetch( \n        `*[_type == \"contact\" ]{\n        title,\n        phoneNumber,\n        emailAddress,\n        address,\n        \"logoImage\": logoImage.asset->url,\n\n      }`)\n      .then((data) => {\n        setContact(data);\n        console.log(data);\n      });\n\n      sanityClient\n      .fetch( \n        `*[_type == \"summary\" ]{\n        title,\n        content\n      }`)\n      .then((data) => {\n        setSummary(data);\n        console.log(data);\n      });\n\n      sanityClient\n      .fetch( \n        `*[_type == \"siteMap\" ]{\n        page1,\n        redirect1,\n        page2,\n        redirect2,\n        page3,\n        redirect3,\n        page4,\n        redirect4,\n        page5,\n        redirect5,\n        page6,\n        redirect6,\n        \n      }`)\n      .then((data) => {\n        setSiteMap(data);\n        console.log('siteMap\\n' + JSON.stringify(data));\n      });\n\n      \n      \n  }, []);\n\n  function changePage(page){\n    //set currentPage & project here\n    setCurrentPage(page);\n    setProject(page);\n  }\n\n\n\n  return (\n    //homepage\n    <>\n    {linksNav && <div>Top Left Links: <a href={linksNav[0].url1} > {linksNav[0].Link1} </a> , <a href={linksNav[0].url2} > {linksNav[0].Link2} </a></div>}\n    \n    Main Image: {linksNav && <img style={{marginTop:\"10px\"}} src={urlFor(linksNav[0].ImageUrl).width(200).url()} />} \n\n    {summary && currentPage == 'pageOne' && <>\n    <div> Summary: {summary[0].title } </div>\n   Paragraph: <BlockContent\n            blocks={summary[0].content}\n            projectId={sanityClient.projectId}\n            dataset={sanityClient.dataset}\n          />\n    </>} \n\n    <div style={{marginBottom:\"20px\"}}>Current Page: {currentPage}</div>\n\n    <PageComponent project={project}></PageComponent>\n\n    <div style={{marginTop:\"20px\"}}>Site Map:</div>\n    {siteMap && <div> {/*this code looks gross - could be redone but prob is simpler this way*/}\n      <button onClick={() => changePage(siteMap[0].redirect1)}> {siteMap[0].page1}</button>\n      <button onClick={() => changePage(siteMap[0].redirect2)}> {siteMap[0].page2}</button>\n      <button onClick={() => changePage(siteMap[0].redirect3)}> {siteMap[0].page3}</button>\n      <button onClick={() => changePage(siteMap[0].redirect4)}> {siteMap[0].page4}</button>\n      <button onClick={() => changePage(siteMap[0].redirect5)}> {siteMap[0].page5}</button>\n      <button onClick={() => changePage(siteMap[0].redirect6)}> {siteMap[0].page6}</button> \n    </div>}\n\n\n    {contact && <div style={{marginTop:\"20px\"}}> Phone Number: {contact[0].phoneNumber } </div>}\n    {contact && <div style={{marginTop:\"20px\"}}> Email Address: {contact[0].emailAddress } </div>}\n    {contact && <div style={{marginTop:\"20px\"}}> Address: {contact[0].address } </div>}\n\n    Page Logo: {contact && contact[0].logoImage && <img style={{marginTop:\"10px\"}} src={urlFor(contact[0].logoImage).width(200).url()} />}\n\n    </>\n  );\n}\nexport default App;","import React, { useEffect, useState } from \"react\";\nimport sanityClient from \"../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nexport default function PageOne() {\n  const [pageData, setPageData] = useState(null);\n\n  useEffect(() => {\n    //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"pageOne\" ]{\n          title,\n          content\n        }`\n      )\n      .then((data) => {\n        setPageData(data);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <>\n      {\" \"}\n      {pageData && (\n        <>\n          <div>{pageData[0].title}</div>\n          <BlockContent\n            blocks={pageData[0].content}\n            projectId={sanityClient.projectId}\n            dataset={sanityClient.dataset}\n          />\n        </>\n      )}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport sanityClient from \"../client\";\n\nexport default function PageTwo() {\n  const [pageData, setPageData] = useState(null);\n\n  useEffect(() => {\n    //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"youtubeLink\" ]{\n          title,\n         url,\n         order\n        }`\n      )\n      .then((data) => {\n        setPageData(data);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <>\n    <div>James Binnall Speaking</div>\n    <div>{pageData && (\n        pageData.map((el, index)=>( //( instead of { means only 1 line of code so return is implicit\n         <div> <a href={el.url} key={index}> {el.title}</a> </div> //Change key to something more unique - index is last resort\n        ))\n      )}\n        </div>\n      \n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport sanityClient from \"../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nexport default function PageThree() {\n  const [pageData, setPageData] = useState(null);\n\n  useEffect(() => {\n    //ran once when page is loaded, sets constant values\n    sanityClient\n      .fetch(\n        `*[_type == \"research\" ]{\n          title,\n          content\n        }`\n      )\n      .then((data) => {\n        setPageData(data);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <>\n      {\" \"}\n      {pageData && (\n        <>\n          <div>{pageData[0].title}</div> {/*Currently set to [1] cause I accidentally made two of these pages - delete thes in the future*/}\n          <BlockContent\n            blocks={pageData[0].content}\n            projectId={sanityClient.projectId}\n            dataset={sanityClient.dataset}\n          />\n        </>\n      )}\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}